import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Checkbox } from "@/components/ui/checkbox";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import { 
  MapPin, 
  Briefcase, 
  CheckSquare, 
  AlertTriangle, 
  Shield, 
  FileText,
  Plus,
  X,
  ChevronDown,
  ChevronUp,
  Layers,
  Search
} from "lucide-react";

interface SwmsFormProps {
  step: number;
  data: any;
  onDataChange: (data: any) => void;
}

export default function SwmsForm({ step, data, onDataChange }: SwmsFormProps) {
  const { toast } = useToast();
  const [formData, setFormData] = useState(data);
  const [collapsedCategories, setCollapsedCategories] = useState<Set<string>>(new Set());
  const [searchTerm, setSearchTerm] = useState("");
  const [expandedCategories, setExpandedCategories] = useState<Set<string>>(new Set());
  const [searchResults, setSearchResults] = useState<any[]>([]);

  const { data: trades } = useQuery({
    queryKey: ["/api/trades"],
  });

  const { data: safetyLibrary } = useQuery({
    queryKey: ["/api/safety-library"],
  });

  useEffect(() => {
    onDataChange(formData);
  }, [formData, onDataChange]);

  const updateFormData = (updates: any) => {
    setFormData((prev: any) => ({ ...prev, ...updates }));
  };

  // Auto-generate SWMS from selected activities
  const autoGenerateSwms = async () => {
    if (!formData.activities || formData.activities.length === 0) {
      toast({
        title: "No Activities Selected",
        description: "Please select activities before auto-generating SWMS",
        variant: "destructive"
      });
      return;
    }

    try {
      const response = await fetch('/api/auto-generate-swms', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          activities: formData.activities,
          tradeType: formData.tradeType,
          projectLocation: formData.projectLocation,
          title: formData.title
        })
      });

      if (response.ok) {
        const autoSwms = await response.json();
        updateFormData({
          riskAssessments: autoSwms.riskAssessments,
          safetyMeasures: autoSwms.safetyMeasures,
          complianceCodes: autoSwms.complianceCodes,
          autoGenerated: true
        });
        
        toast({
          title: "SWMS Auto-Generated",
          description: `Generated ${autoSwms.riskAssessments.length} risk assessments and ${autoSwms.safetyMeasures.length} safety measures from selected activities`,
        });
      } else {
        throw new Error('Failed to auto-generate SWMS');
      }
    } catch (error) {
      toast({
        title: "Auto-Generation Failed",
        description: "Failed to auto-generate SWMS. Please try again.",
        variant: "destructive"
      });
    }
  };

  const addArrayItem = (field: string, item: any) => {
    setFormData((prev: any) => ({
      ...prev,
      [field]: [...(prev[field] || []), item]
    }));
  };

  const removeArrayItem = (field: string, index: number) => {
    setFormData((prev: any) => ({
      ...prev,
      [field]: prev[field].filter((_: any, i: number) => i !== index)
    }));
  };

  const toggleCategory = (categoryName: string) => {
    setCollapsedCategories(prev => {
      const newSet = new Set(prev);
      if (newSet.has(categoryName)) {
        newSet.delete(categoryName);
      } else {
        newSet.add(categoryName);
      }
      return newSet;
    });
  };

  const selectedTrade = trades?.find((trade: any) => trade.name === formData.tradeType);

  switch (step) {
    case 1:
      return (
        <div className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <Label htmlFor="title" className="flex items-center">
                <FileText className="mr-2 h-4 w-4" />
                SWMS Title
              </Label>
              <Input
                id="title"
                value={formData.title}
                onChange={(e) => updateFormData({ title: e.target.value })}
                placeholder="e.g., Electrical Installation - Office Building"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="tradeType" className="flex items-center">
                <Briefcase className="mr-2 h-4 w-4" />
                Trade Type
              </Label>
              <Select value={formData.tradeType} onValueChange={(value) => updateFormData({ tradeType: value })}>
                <SelectTrigger>
                  <SelectValue placeholder="Select your trade" />
                </SelectTrigger>
                <SelectContent>
                  {trades?.map((trade: any) => (
                    <SelectItem key={trade.name} value={trade.name}>
                      {trade.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="projectLocation" className="flex items-center">
              <MapPin className="mr-2 h-4 w-4" />
              Project Location
            </Label>
            <Input
              id="projectLocation"
              value={formData.projectLocation}
              onChange={(e) => updateFormData({ projectLocation: e.target.value })}
              placeholder="Enter the complete project address"
            />
          </div>

          {selectedTrade && (
            <Card>
              <CardHeader>
                <CardTitle className="text-base flex items-center">
                  <CheckSquare className="mr-2 h-4 w-4" />
                  Select Activities for {selectedTrade.name}
                </CardTitle>
                <p className="text-sm text-gray-600">Choose all applicable work activities for this project</p>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* Activity Search */}
                <div className="space-y-2">
                  <Label className="text-sm font-medium">Search Activities</Label>
                  <div className="relative">
                    <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                    <Input
                      placeholder="Search for specific activities..."
                      className="pl-10"
                      value={searchTerm || ""}
                      onChange={async (e) => {
                        const term = e.target.value;
                        setSearchTerm(term);
                        
                        if (term.length > 2) {
                          try {
                            const response = await fetch(`/api/search-activities?q=${encodeURIComponent(term)}&trade=${encodeURIComponent(selectedTrade.name)}`);
                            const results = await response.json();
                            setSearchResults(results);
                          } catch (error) {
                            console.error('Search failed:', error);
                            setSearchResults([]);
                          }
                        } else {
                          setSearchResults([]);
                        }
                      }}
                    />
                  </div>
                  
                  {/* Search Results */}
                  {searchTerm.length > 2 && searchResults.length > 0 && (
                    <div className="border rounded-lg p-4 bg-blue-50">
                      <h4 className="font-medium text-sm mb-3">Search Results ({searchResults.length} found)</h4>
                      <div className="space-y-2 max-h-48 overflow-y-auto">
                        {searchResults.map((result: any, index: number) => {
                          const isSelected = formData.activities.includes(result.activity);
                          return (
                            <div key={index} className="flex items-center space-x-2">
                              <Checkbox
                                checked={isSelected}
                                onCheckedChange={(checked) => {
                                  if (checked) {
                                    addArrayItem('activities', result.activity);
                                  } else {
                                    const idx = formData.activities.indexOf(result.activity);
                                    if (idx > -1) removeArrayItem('activities', idx);
                                  }
                                }}
                              />
                              <Label className="text-sm flex-1 cursor-pointer">
                                {result.activity}
                                <Badge variant="outline" className="ml-2 text-xs">
                                  {result.trade || selectedTrade.name}
                                </Badge>
                              </Label>
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  )}
                  
                  {searchTerm.length > 2 && searchResults.length === 0 && (
                    <div className="text-sm text-gray-500 p-2">
                      No activities found matching "{searchTerm}"
                    </div>
                  )}
                </div>

                {selectedTrade.categories?.map((category: any) => {
                  const isCollapsed = collapsedCategories.has(category.name);
                  const selectedCount = category.activities.filter((activity: string) => 
                    formData.activities.includes(activity)
                  ).length;
                  const totalCount = category.totalActivities || category.activities.length;
                  const displayedCount = category.activities.length;
                  
                  return (
                    <div key={category.name} className="border border-gray-200 rounded-lg overflow-hidden">
                      <div className="activity-category-header bg-gray-50 px-4 py-3">
                        <div className="flex items-center justify-between">
                          <Button
                            type="button"
                            variant="ghost"
                            size="sm"
                            className="flex items-center gap-2 p-0 h-auto font-medium text-gray-800 hover:bg-transparent"
                            onClick={() => toggleCategory(category.name)}
                          >
                            <Layers className="h-4 w-4" />
                            {category.name}
                            <Badge variant="outline" className="ml-2 text-xs">
                              {selectedCount}/{totalCount}
                            </Badge>
                            {isCollapsed ? (
                              <ChevronDown className="h-4 w-4 ml-1" />
                            ) : (
                              <ChevronUp className="h-4 w-4 ml-1" />
                            )}
                          </Button>
                          
                          <Button
                            type="button"
                            variant="ghost"
                            size="sm"
                            className="select-all-btn"
                            onClick={() => {
                              const allSelected = category.activities.every((activity: string) => 
                                formData.activities.includes(activity)
                              );
                              if (allSelected) {
                                // Deselect all
                                category.activities.forEach((activity: string) => {
                                  const index = formData.activities.indexOf(activity);
                                  if (index > -1) removeArrayItem('activities', index);
                                });
                              } else {
                                // Select all
                                category.activities.forEach((activity: string) => {
                                  if (!formData.activities.includes(activity)) {
                                    addArrayItem('activities', activity);
                                  }
                                });
                              }
                            }}
                          >
                            {category.activities.every((activity: string) => 
                              formData.activities.includes(activity)
                            ) ? 'Deselect All' : 'Select All'}
                          </Button>
                        </div>
                      </div>
                      
                      <div className={`category-content ${isCollapsed ? 'collapsed' : 'expanded'}`}>
                        {!isCollapsed && (
                          <div className="p-4">
                            <div className="activity-checkbox-group">
                              {category.activities.map((activity: string) => {
                                const isSelected = formData.activities.includes(activity);
                                return (
                                  <div 
                                    key={activity} 
                                    className={`activity-checkbox-item ${isSelected ? 'selected' : ''}`}
                                  >
                                    <Checkbox
                                      id={activity}
                                      checked={isSelected}
                                      onCheckedChange={(checked) => {
                                        if (checked) {
                                          addArrayItem('activities', activity);
                                        } else {
                                          const index = formData.activities.indexOf(activity);
                                          if (index > -1) removeArrayItem('activities', index);
                                        }
                                      }}
                                      className="mt-0.5"
                                    />
                                    <Label 
                                      htmlFor={activity} 
                                      className="text-sm text-gray-700 leading-tight cursor-pointer flex-1"
                                    >
                                      {activity}
                                    </Label>
                                  </div>
                                );
                              })}
                            </div>

                            {/* Show More Button for categories with additional activities */}
                            {category.hasMore && (
                              <div className="mt-4 border-t pt-4">
                                <Button
                                  type="button"
                                  variant="outline"
                                  size="sm"
                                  className="w-full"
                                  onClick={async () => {
                                    try {
                                      const response = await fetch(`/api/trades/${selectedTrade.name}/activities?category=${encodeURIComponent(category.name)}`);
                                      const data = await response.json();
                                      
                                      // Update the category with all activities
                                      const updatedCategories = selectedTrade.categories.map((cat: any) => 
                                        cat.name === category.name 
                                          ? { ...cat, activities: data.activities, hasMore: false }
                                          : cat
                                      );
                                      
                                      // Update the trades data locally
                                      // This would need proper state management in a real app
                                      console.log('Loaded all activities for', category.name, ':', data.activities.length);
                                    } catch (error) {
                                      console.error('Failed to load more activities:', error);
                                    }
                                  }}
                                >
                                  Show All {totalCount} Activities ({displayedCount} of {totalCount} shown)
                                </Button>
                              </div>
                            )}
                          </div>
                        )}
                      </div>
                    </div>
                  );
                })}
                
                {formData.activities.length > 0 && (
                  <div className="selected-activities-summary">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-2">
                        <CheckSquare className="h-4 w-4 text-blue-600" />
                        <span className="text-sm font-medium text-blue-800">
                          Selected Activities ({formData.activities.length})
                        </span>
                      </div>
                      <Button
                        type="button"
                        onClick={autoGenerateSwms}
                        className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 text-sm font-medium shadow-sm"
                      >
                        <Shield className="h-4 w-4 mr-2" />
                        Auto-Generate SWMS
                      </Button>
                    </div>
                    
                    {formData.autoGenerated && (
                      <div className="bg-green-50 border border-green-200 rounded-lg p-3 mb-4">
                        <div className="flex items-center gap-2 text-green-800">
                          <CheckSquare className="h-4 w-4" />
                          <span className="text-sm font-medium">
                            SWMS Auto-Generated Successfully
                          </span>
                        </div>
                        <p className="text-xs text-green-700 mt-1">
                          Pre-populated with {formData.riskAssessments?.length || 0} risk assessments, 
                          {formData.safetyMeasures?.length || 0} safety measures, and 
                          {formData.complianceCodes?.length || 0} compliance codes based on your selected activities.
                          You can review and edit these in the next steps.
                        </p>
                      </div>
                    )}
                    
                    <div className="flex items-center justify-between mb-2">
                      <span></span>
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        className="text-xs h-6 px-2 text-blue-600 hover:text-blue-800"
                        onClick={() => updateFormData({ activities: [] })}
                      >
                        Clear All
                      </Button>
                    </div>
                    <div className="flex flex-wrap gap-1.5">
                      {formData.activities.slice(0, 8).map((activity: string, index: number) => (
                        <Badge key={index} className="activity-badge">
                          {activity}
                        </Badge>
                      ))}
                      {formData.activities.length > 8 && (
                        <Badge variant="outline" className="text-xs bg-white">
                          +{formData.activities.length - 8} more
                        </Badge>
                      )}
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          )}
        </div>
      );

    case 2:
      return (
        <div className="space-y-6">
          <div className="text-center">
            <AlertTriangle className="mx-auto h-12 w-12 text-orange-500 mb-4" />
            <h3 className="text-lg font-semibold mb-2">Risk Assessment</h3>
            <p className="text-gray-600 text-sm">
              Identify and assess potential hazards for your work activities
            </p>
          </div>

          {formData.activities.length > 0 && (
            <div className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle className="text-base flex items-center">
                    <Shield className="mr-2 h-4 w-4" />
                    AI-Powered Risk Analysis
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div>
                      <Label className="text-sm font-medium">Selected Activities ({formData.activities.length})</Label>
                      <div className="flex flex-wrap gap-1.5 mt-2">
                        {formData.activities.slice(0, 6).map((activity: string, index: number) => (
                          <Badge key={index} variant="secondary" className="text-xs">
                            {activity}
                          </Badge>
                        ))}
                        {formData.activities.length > 6 && (
                          <Badge variant="outline" className="text-xs">
                            +{formData.activities.length - 6} more
                          </Badge>
                        )}
                      </div>
                    </div>
                    
                    <Button
                      type="button"
                      className="w-full"
                      onClick={async () => {
                        try {
                          const response = await fetch('/api/ai/enhance-swms', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                              activities: formData.activities,
                              tradeType: formData.tradeType,
                              projectLocation: formData.projectLocation
                            })
                          });
                          
                          if (response.ok) {
                            const aiData = await response.json();
                            updateFormData({
                              riskAssessments: aiData.riskAssessments,
                              safetyMeasures: aiData.safetyMeasures,
                              complianceCodes: [...(formData.complianceCodes || []), ...aiData.complianceRecommendations]
                            });
                            toast({
                              title: "AI Analysis Complete",
                              description: `Generated ${aiData.riskAssessments.length} risk assessments and ${aiData.safetyMeasures.length} safety measures`,
                            });
                          } else {
                            throw new Error('AI analysis failed');
                          }
                        } catch (error) {
                          toast({
                            title: "AI Analysis Error",
                            description: "Unable to generate AI risk assessment. Please check your connection.",
                            variant: "destructive"
                          });
                        }
                      }}
                    >
                      <Shield className="mr-2 h-4 w-4" />
                      Generate AI Risk Assessment
                    </Button>
                  </div>
                </CardContent>
              </Card>

              {formData.riskAssessments && formData.riskAssessments.length > 0 && (
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base">Identified Risks</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {formData.riskAssessments.map((risk: any, index: number) => (
                        <div key={index} className="border border-gray-200 rounded-lg p-4">
                          <div className="flex items-start justify-between mb-3">
                            <div className="flex-1">
                              <div className="flex items-center gap-2 mb-2">
                                <h4 className="font-medium text-gray-900">{risk.hazard}</h4>
                                <Badge 
                                  variant={
                                    risk.riskLevel === 'extreme' ? 'destructive' :
                                    risk.riskLevel === 'high' ? 'destructive' :
                                    risk.riskLevel === 'medium' ? 'default' : 'secondary'
                                  }
                                  className="text-xs"
                                >
                                  {risk.riskLevel.toUpperCase()}
                                </Badge>
                              </div>
                              <p className="text-sm text-gray-600 mb-2">
                                <strong>Responsible:</strong> {risk.responsiblePerson}
                              </p>
                            </div>
                            <Button
                              type="button"
                              variant="ghost"
                              size="sm"
                              onClick={() => {
                                const updatedRisks = formData.riskAssessments.filter((_: any, i: number) => i !== index);
                                updateFormData({ riskAssessments: updatedRisks });
                              }}
                            >
                              <X className="h-4 w-4" />
                            </Button>
                          </div>
                          
                          <div className="space-y-2">
                            <Label className="text-xs font-medium text-gray-700">Control Measures</Label>
                            <div className="space-y-1">
                              {Array.isArray(risk.controlMeasures) ? 
                                risk.controlMeasures.map((measure: string, measureIndex: number) => (
                                  <div key={measureIndex} className="text-sm text-gray-600 flex items-start">
                                    <CheckSquare className="h-3 w-3 mt-0.5 mr-2 text-green-500 flex-shrink-0" />
                                    {measure}
                                  </div>
                                )) :
                                <div className="text-sm text-gray-600 flex items-start">
                                  <CheckSquare className="h-3 w-3 mt-0.5 mr-2 text-green-500 flex-shrink-0" />
                                  {risk.controlMeasures}
                                </div>
                              }
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              )}

              <Card>
                <CardHeader>
                  <CardTitle className="text-base">Add Custom Risk</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="hazard">Hazard Description</Label>
                      <Input
                        id="hazard"
                        placeholder="e.g., Fall from height"
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="riskLevel">Risk Level</Label>
                      <Select>
                        <SelectTrigger>
                          <SelectValue placeholder="Select risk level" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="low">Low</SelectItem>
                          <SelectItem value="medium">Medium</SelectItem>
                          <SelectItem value="high">High</SelectItem>
                          <SelectItem value="extreme">Extreme</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="responsiblePerson">Responsible Person</Label>
                      <Input
                        id="responsiblePerson"
                        placeholder="e.g., Site Supervisor"
                      />
                    </div>
                    <div className="space-y-2 md:col-span-2">
                      <Label htmlFor="controlMeasures">Control Measures</Label>
                      <Textarea
                        id="controlMeasures"
                        placeholder="Describe the control measures to mitigate this risk..."
                        rows={3}
                      />
                    </div>
                    <div className="md:col-span-2">
                      <Button type="button" className="w-full">
                        <Plus className="mr-2 h-4 w-4" />
                        Add Risk Assessment
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {formData.activities.length === 0 && (
            <Card>
              <CardContent className="text-center py-8">
                <AlertTriangle className="mx-auto h-8 w-8 text-gray-400 mb-3" />
                <p className="text-gray-500">
                  Please select activities in Step 1 to continue with risk assessment
                </p>
              </CardContent>
            </Card>
          )}
        </div>
      );

    case 3:
      return (
        <div className="space-y-6">
          <div className="text-center">
            <Shield className="mx-auto h-12 w-12 text-green-500 mb-4" />
            <h3 className="text-lg font-semibold mb-2">Safety Measures</h3>
            <p className="text-gray-600 text-sm">
              Define safety procedures and protective measures for your work
            </p>
          </div>

          {formData.safetyMeasures && formData.safetyMeasures.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle className="text-base">AI-Generated Safety Measures</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {formData.safetyMeasures.map((measure: any, index: number) => (
                    <div key={index} className="border border-gray-200 rounded-lg p-4">
                      <div className="flex items-start justify-between mb-3">
                        <h4 className="font-medium text-gray-900">{measure.category}</h4>
                        <Button
                          type="button"
                          variant="ghost"
                          size="sm"
                          onClick={() => {
                            const updatedMeasures = formData.safetyMeasures.filter((_: any, i: number) => i !== index);
                            updateFormData({ safetyMeasures: updatedMeasures });
                          }}
                        >
                          <X className="h-4 w-4" />
                        </Button>
                      </div>
                      
                      <div className="space-y-3">
                        {measure.measures && measure.measures.length > 0 && (
                          <div>
                            <Label className="text-xs font-medium text-gray-700">Safety Procedures</Label>
                            <div className="space-y-1 mt-1">
                              {measure.measures.map((item: string, itemIndex: number) => (
                                <div key={itemIndex} className="text-sm text-gray-600 flex items-start">
                                  <CheckSquare className="h-3 w-3 mt-0.5 mr-2 text-green-500 flex-shrink-0" />
                                  {item}
                                </div>
                              ))}
                            </div>
                          </div>
                        )}
                        
                        {measure.equipment && measure.equipment.length > 0 && (
                          <div>
                            <Label className="text-xs font-medium text-gray-700">Required Equipment</Label>
                            <div className="space-y-1 mt-1">
                              {measure.equipment.map((item: string, itemIndex: number) => (
                                <div key={itemIndex} className="text-sm text-gray-600 flex items-start">
                                  <Shield className="h-3 w-3 mt-0.5 mr-2 text-blue-500 flex-shrink-0" />
                                  {item}
                                </div>
                              ))}
                            </div>
                          </div>
                        )}
                        
                        {measure.procedures && measure.procedures.length > 0 && (
                          <div>
                            <Label className="text-xs font-medium text-gray-700">Work Procedures</Label>
                            <div className="space-y-1 mt-1">
                              {measure.procedures.map((item: string, itemIndex: number) => (
                                <div key={itemIndex} className="text-sm text-gray-600 flex items-start">
                                  <FileText className="h-3 w-3 mt-0.5 mr-2 text-orange-500 flex-shrink-0" />
                                  {item}
                                </div>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          <Card>
            <CardHeader>
              <CardTitle className="text-base">Add Custom Safety Measure</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="safetyCategory">Safety Category</Label>
                  <Input
                    id="safetyCategory"
                    placeholder="e.g., Personal Protective Equipment"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="safetyProcedures">Safety Procedures</Label>
                  <Textarea
                    id="safetyProcedures"
                    placeholder="List the safety procedures and measures..."
                    rows={4}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="requiredEquipment">Required Equipment</Label>
                  <Textarea
                    id="requiredEquipment"
                    placeholder="List required safety equipment..."
                    rows={3}
                  />
                </div>
                <Button type="button" className="w-full">
                  <Plus className="mr-2 h-4 w-4" />
                  Add Safety Measure
                </Button>
              </div>
            </CardContent>
          </Card>

          {(formData.activities.length === 0 || !formData.riskAssessments || formData.riskAssessments.length === 0) && (
            <Card>
              <CardContent className="text-center py-8">
                <Shield className="mx-auto h-8 w-8 text-gray-400 mb-3" />
                <p className="text-gray-500">
                  Complete risk assessments in Step 2 to get AI-generated safety measures
                </p>
              </CardContent>
            </Card>
          )}
        </div>
      );

    case 4:
      return (
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Applicable Safety Codes</CardTitle>
            </CardHeader>
            <CardContent>
              {selectedTrade && (
                <div className="space-y-4">
                  <h4 className="font-medium text-gray-800">Recommended for {selectedTrade.name}</h4>
                  <div className="space-y-3">
                    {selectedTrade?.codes?.map((code: string) => {
                      const safetyItem = safetyLibrary?.find((item: any) => item.code === code);
                      return (
                        <div key={code} className="flex items-center space-x-3 p-3 border rounded-lg">
                          <Checkbox
                            checked={formData.complianceCodes.includes(code)}
                            onCheckedChange={(checked) => {
                              if (checked) {
                                addArrayItem('complianceCodes', code);
                              } else {
                                const index = formData.complianceCodes.indexOf(code);
                                if (index > -1) removeArrayItem('complianceCodes', index);
                              }
                            }}
                          />
                          <div className="flex-1">
                            <p className="font-medium text-sm">{code}</p>
                            {safetyItem && (
                              <p className="text-xs text-gray-600">{safetyItem.title}</p>
                            )}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      );

    case 5:
      return (
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Review Your SWMS</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="font-medium text-gray-800 mb-2">Project Details</h4>
                  <div className="space-y-1 text-sm">
                    <p><strong>Title:</strong> {formData.title}</p>
                    <p><strong>Trade:</strong> {formData.tradeType}</p>
                    <p><strong>Location:</strong> {formData.projectLocation}</p>
                  </div>
                </div>
                <div>
                  <h4 className="font-medium text-gray-800 mb-2">Activities</h4>
                  <div className="flex flex-wrap gap-1">
                    {formData.activities.map((activity: string, index: number) => (
                      <Badge key={index} variant="outline" className="text-xs">
                        {activity}
                      </Badge>
                    ))}
                  </div>
                </div>
              </div>
              
              <div>
                <h4 className="font-medium text-gray-800 mb-2">Compliance Codes</h4>
                <div className="flex flex-wrap gap-2">
                  {formData.complianceCodes.map((code: string, index: number) => (
                    <Badge key={index} variant="secondary" className="text-xs">
                      {code}
                    </Badge>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      );

    default:
      return <div>Invalid step</div>;
  }
}
