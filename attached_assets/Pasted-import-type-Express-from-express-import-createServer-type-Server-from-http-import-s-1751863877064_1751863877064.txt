import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import puppeteer from "puppeteer";

export async function registerRoutes(app: Express): Promise<Server> {
  // Health check endpoint
  app.get("/api/health", (req, res) => {
    res.json({ status: "ok", timestamp: new Date().toISOString() });
  });

  // SWMS document endpoints
  app.get("/api/swms", (req, res) => {
    res.json({ message: "SWMS API endpoint active" });
  });

  // Get SWMS template data
  app.get("/api/swms/template", (req, res) => {
    res.json({
      success: true,
      data: {
        version: "1.0.0",
        fields: 85,
        sections: 13,
        coverage: "100%"
      }
    });
  });

  // Save SWMS document
  app.post("/api/swms/save", (req, res) => {
    const { formData } = req.body;
    
    // Basic validation
    if (!formData) {
      return res.status(400).json({ error: "Form data is required" });
    }

    // In a real implementation, you would save to database
    // For now, just acknowledge receipt
    res.json({
      success: true,
      message: "SWMS document saved successfully",
      id: `swms_${Date.now()}`,
      timestamp: new Date().toISOString()
    });
  });

  // Puppeteer PDF export endpoint
  app.post("/api/swms/export-pdf", async (req, res) => {
    let browser;
    try {
      const { html, filename } = req.body;
      
      if (!html) {
        return res.status(400).json({ error: "HTML content is required" });
      }

      console.log('Starting Puppeteer browser launch...');

      // Use puppeteer-core with bundled Chrome for better compatibility
      browser = await puppeteer.launch({
        headless: true,
        timeout: 60000,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-gpu',
          '--no-first-run',
          '--disable-default-apps',
          '--disable-extensions',
          '--single-process',
          '--disable-web-security',
          '--disable-features=VizDisplayCompositor'
        ],
        defaultViewport: { width: 1200, height: 800 }
      });

      console.log('Browser launched successfully');

      const page = await browser.newPage();
      
      // Set longer timeouts
      page.setDefaultTimeout(30000);
      page.setDefaultNavigationTimeout(30000);
      
      // Set viewport to A4 landscape dimensions
      await page.setViewport({
        width: 1123, // A4 landscape width in pixels at 96 DPI
        height: 794,  // A4 landscape height in pixels at 96 DPI
        deviceScaleFactor: 1.5 // Reduced scale for better performance
      });

      console.log('Setting page content...');

      // Set HTML content with CSS for proper rendering
      await page.setContent(`
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>SWMS Document</title>
          <style>
            * { box-sizing: border-box; }
            body { 
              margin: 0; 
              padding: 0; 
              font-family: Arial, Helvetica, sans-serif;
              -webkit-print-color-adjust: exact;
              color-adjust: exact;
              background: white;
            }
            @page { 
              size: A4 landscape; 
              margin: 0; 
            }
            .page-break { 
              page-break-before: always; 
            }
            @media print {
              .page-break { 
                page-break-before: always; 
              }
            }
          </style>
        </head>
        <body>
          ${html}
        </body>
        </html>
      `, { 
        waitUntil: ['load', 'domcontentloaded'],
        timeout: 30000
      });

      console.log('Content loaded, generating PDF...');

      // Wait a bit for fonts and content to fully render
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Generate PDF
      const pdf = await page.pdf({
        format: 'A4',
        landscape: true,
        printBackground: true,
        margin: { top: 0, right: 0, bottom: 0, left: 0 },
        preferCSSPageSize: true,
        timeout: 30000
      });

      console.log('PDF generated successfully, size:', pdf.length, 'bytes');

      await browser.close();

      // Set response headers for PDF download
      const pdfFilename = filename || 'SWMS_Document.pdf';
      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', `attachment; filename="${pdfFilename}"`);
      res.setHeader('Content-Length', pdf.length);

      // Send PDF buffer
      res.send(pdf);

    } catch (error) {
      console.error('PDF generation error:', error);
      console.error('Error details:', {
        message: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : 'No stack trace'
      });
      
      // Ensure browser is closed on error
      if (browser) {
        try {
          await browser.close();
        } catch (closeError) {
          console.error('Error closing browser:', closeError);
        }
      }
      
      res.status(500).json({ 
        error: 'Failed to generate PDF',
        details: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  });

  // Generate PDF endpoint
  app.post("/api/swms/generate-pdf", (req, res) => {
    const { formData } = req.body;
    
    if (!formData) {
      return res.status(400).json({ error: "Form data is required" });
    }

    res.json({
      success: true,
      message: "PDF generation initiated",
      downloadUrl: "/api/swms/download-pdf",
      timestamp: new Date().toISOString()
    });
  });

  // Risk assessment endpoints
  app.get("/api/risk-assessment/categories", (req, res) => {
    res.json({
      success: true,
      data: {
        hrewCategories: ["Working at Heights", "Electrical Work", "Hot Work", "Confined Spaces"],
        ppeCategories: ["Head Protection", "Eye Protection", "Respiratory Protection", "Hand Protection"],
        equipmentCategories: ["Mobile Plant", "Hand Tools", "Lifting Equipment", "Safety Equipment"]
      }
    });
  });

  // Compliance endpoints
  app.get("/api/compliance/standards", (req, res) => {
    res.json({
      success: true,
      data: {
        asNzs: ["AS/NZS 1801", "AS/NZS 4381", "AS/NZS 1715"],
        whsRegulations: ["WHS Regulation 2017", "Safe Work Australia Guidelines"],
        environmentalFactors: ["Weather conditions", "Site hazards", "Emergency procedures"]
      }
    });
  });

  // Status endpoint for external integrations
  app.get("/api/status", (req, res) => {
    res.json({
      application: "RiskTemplateBuilder",
      status: "running",
      version: "1.0.0",
      endpoints: {
        health: "/api/health",
        swms: "/api/swms",
        riskAssessment: "/api/risk-assessment",
        compliance: "/api/compliance"
      },
      fieldMapping: {
        totalFields: 85,
        mappedSections: 13,
        coverage: "100%",
        integrationStatus: "active"
      }
    });
  });

  const httpServer = createServer(app);

  return httpServer;
}
