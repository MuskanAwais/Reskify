import PDFDocument from 'pdfkit';

export function generateFixedSWMSPDF(data: any): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({ 
        size: 'A4',
        layout: 'landscape',
        margins: { top: 30, left: 30, right: 30, bottom: 30 }
      });
      
      const buffers: Buffer[] = [];
      doc.on('data', buffers.push.bind(buffers));
      doc.on('end', () => resolve(Buffer.concat(buffers)));
      doc.on('error', reject);

      const pageWidth = 842 - 60; // Account for margins
      const pageHeight = 595 - 60;
      
      // Add subtle watermark - FIXED VERSION
      doc.save();
      doc.opacity(0.05);
      doc.fontSize(24).fillColor('#64748b').font('Helvetica');
      for (let i = 0; i < 4; i++) {
        for (let j = 0; j < 3; j++) {
          doc.text('RISKIFY', 50 + (i * 180), 100 + (j * 140), { width: 120, align: 'center' });
        }
      }
      doc.restore();
      
      let yPos = 50;

      // HEADER SECTION
      doc.save();
      doc.fillColor('#1e293b')
         .rect(30, yPos, pageWidth, 60)
         .fill();
      
      doc.fillColor('#ffffff')
         .fontSize(22)
         .font('Helvetica-Bold')
         .text('SAFE WORK METHOD STATEMENT', 50, yPos + 15);
      
      doc.fillColor('#94a3b8')
         .fontSize(12)
         .font('Helvetica')
         .text('Generated by Riskify Professional SWMS Builder', 50, yPos + 40);
      
      // Status badge
      doc.fillColor('#059669')
         .rect(pageWidth - 90, yPos + 15, 80, 30)
         .fill();
      doc.fillColor('#ffffff')
         .fontSize(10)
         .font('Helvetica-Bold')
         .text('COMPLETED', pageWidth - 85, yPos + 27);
      
      doc.restore();
      yPos += 80;

      // PROJECT INFORMATION SECTION
      doc.save();
      doc.fillColor('#f8fafc')
         .rect(30, yPos, pageWidth, 90)
         .fill();
      
      doc.strokeColor('#e2e8f0')
         .lineWidth(1)
         .rect(30, yPos, pageWidth, 90)
         .stroke();
      
      doc.fillColor('#1e293b')
         .fontSize(14)
         .font('Helvetica-Bold')
         .text('PROJECT INFORMATION', 50, yPos + 15);
      
      // Project details in clean layout
      const projectInfo = [
        ['Project:', data.title || data.projectName || 'Project Name'],
        ['Location:', data.projectAddress || data.projectLocation || 'Project Location'],
        ['Contractor:', data.principalContractor || 'Principal Contractor'],
        ['Trade:', data.tradeType || 'Trade Type'],
        ['Job No:', data.jobNumber || 'Job Number'],
        ['Date:', new Date().toLocaleDateString('en-AU')]
      ];
      
      let infoY = yPos + 40;
      for (let i = 0; i < projectInfo.length; i++) {
        const col = i % 2;
        const row = Math.floor(i / 2);
        
        const x = 50 + (col * 350);
        const y = infoY + (row * 15);
        
        doc.fillColor('#64748b')
           .fontSize(9)
           .font('Helvetica-Bold')
           .text(projectInfo[i][0], x, y);
           
        doc.fillColor('#1e293b')
           .fontSize(9)
           .font('Helvetica')
           .text(projectInfo[i][1], x + 70, y, { width: 250 });
      }
      doc.restore();
      yPos += 110;

      // WORK ACTIVITIES TABLE
      doc.save();
      doc.fillColor('#1e293b')
         .fontSize(16)
         .font('Helvetica-Bold')
         .text('WORK ACTIVITIES & RISK ASSESSMENT', 50, yPos);
      yPos += 30;
      
      // Table setup
      const tableStartX = 30;
      const tableWidth = pageWidth;
      const columnWidths = [120, 120, 70, 150, 90, 70]; // Exact columns requested
      const headerHeight = 25;
      const rowHeight = 35;
      
      // Table header
      doc.fillColor('#f1f5f9')
         .rect(tableStartX, yPos, tableWidth, headerHeight)
         .fill();
      
      doc.strokeColor('#d1d5db')
         .lineWidth(0.5)
         .rect(tableStartX, yPos, tableWidth, headerHeight)
         .stroke();
      
      const headers = [
        'Activity/Item',
        'Hazards/Risks', 
        'Initial Risk Score',
        'Control Measures/Risk Treatment',
        'Legislation/Codes',
        'Residual Risk Score'
      ];
      
      let headerX = tableStartX;
      headers.forEach((header, index) => {
        doc.fillColor('#374151')
           .fontSize(8)
           .font('Helvetica-Bold')
           .text(header, headerX + 5, yPos + 8, { 
             width: columnWidths[index] - 10, 
             align: 'center'
           });
        
        if (index < headers.length - 1) {
          doc.strokeColor('#d1d5db')
             .moveTo(headerX + columnWidths[index], yPos)
             .lineTo(headerX + columnWidths[index], yPos + headerHeight)
             .stroke();
        }
        
        headerX += columnWidths[index];
      });
      yPos += headerHeight;
      
      // Table rows with actual data
      const activities = data.workActivities || [];
      const maxRows = Math.min(activities.length, 8); // Fit on one page
      
      for (let i = 0; i < maxRows; i++) {
        const activity = activities[i];
        
        // Alternating row colors
        if (i % 2 === 0) {
          doc.fillColor('#f8fafc')
             .rect(tableStartX, yPos, tableWidth, rowHeight)
             .fill();
        }
        
        // Row border
        doc.strokeColor('#e5e7eb')
           .lineWidth(0.3)
           .rect(tableStartX, yPos, tableWidth, rowHeight)
           .stroke();
        
        const cellData = [
          activity.activity || 'Activity',
          activity.hazards || 'Hazards identified',
          activity.initialRisk || 'M (6)',
          activity.controlMeasures || 'Control measures implemented',
          activity.legislation || 'WHS Regulation 2017',
          activity.residualRisk || 'L (2)'
        ];
        
        let cellX = tableStartX;
        cellData.forEach((text, cellIndex) => {
          const cellWidth = columnWidths[cellIndex];
          
          // Risk score styling
          if (cellIndex === 2 || cellIndex === 5) {
            const riskColor = getRiskColor(text);
            doc.save();
            doc.fillColor(riskColor)
               .rect(cellX + 10, yPos + 8, cellWidth - 20, 18)
               .fill();
            doc.fillColor('#ffffff')
               .fontSize(7)
               .font('Helvetica-Bold')
               .text(text, cellX + 5, yPos + 14, { 
                 width: cellWidth - 10, 
                 align: 'center'
               });
            doc.restore();
          } else {
            doc.fillColor('#374151')
               .fontSize(7)
               .font('Helvetica')
               .text(text, cellX + 5, yPos + 5, { 
                 width: cellWidth - 10, 
                 height: rowHeight - 10,
                 lineGap: 1
               });
          }
          
          // Cell dividers
          if (cellIndex < cellData.length - 1) {
            doc.strokeColor('#e5e7eb')
               .moveTo(cellX + cellWidth, yPos)
               .lineTo(cellX + cellWidth, yPos + rowHeight)
               .stroke();
          }
          
          cellX += cellWidth;
        });
        
        yPos += rowHeight;
      }
      
      doc.restore();
      
      // Footer
      doc.fillColor('#64748b')
         .fontSize(8)
         .font('Helvetica')
         .text(`Generated by Riskify Professional SWMS Builder | ${new Date().toLocaleDateString('en-AU')} ${new Date().toLocaleTimeString('en-AU')}`, 
               30, 565, { width: pageWidth, align: 'center' });

      doc.end();
      
    } catch (error) {
      console.error('PDF Generation Error:', error);
      reject(error);
    }
  });
}

function getRiskColor(risk: string): string {
  const riskText = risk.toUpperCase();
  if (riskText.includes('L') || riskText.includes('LOW')) return '#059669';
  if (riskText.includes('M') || riskText.includes('MEDIUM')) return '#d97706';  
  if (riskText.includes('H') || riskText.includes('HIGH')) return '#dc2626';
  if (riskText.includes('E') || riskText.includes('EXTREME')) return '#991b1b';
  return '#6b7280';
}