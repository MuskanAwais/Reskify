import PDFDocument from 'pdfkit';

export function generateEmbeddedPDF(data: any): Promise<Buffer> {
  return new Promise((resolve, reject) => {
  console.log('🏗️ EMBEDDED PDF GENERATOR - Creating SWMS document');
  console.log('📊 Data received:', {
    projectName: data.projectName || data.jobName || 'Untitled',
    activitiesCount: data.swmsData?.activities?.length || data.activities?.length || data.workActivities?.length || 0,
    equipmentCount: data.swmsData?.plantEquipment?.length || data.plantEquipment?.length || 0
  });
  
  console.log('📋 Raw data keys:', Object.keys(data));
  console.log('📋 WorkActivities found:', !!data.workActivities, data.workActivities?.length || 0);

  const doc = new PDFDocument({
    size: 'A4',
    margins: { top: 50, bottom: 50, left: 50, right: 50 }
  });

  const chunks: Buffer[] = [];
  doc.on('data', (chunk: Buffer) => chunks.push(chunk));
  doc.on('end', () => {
    const buffer = Buffer.concat(chunks);
    console.log(`✅ PDF generated successfully: ${buffer.length} bytes`);
    resolve(buffer);
  });
  doc.on('error', (error) => {
    console.error('PDF generation error:', error);
    reject(error);
  });

  // Extract data with fallbacks
  const formData = data.formData || data.swmsData || data;
  const projectName = data.projectName || formData.jobName || formData.title || 'SWMS Project';
  const projectNumber = data.projectNumber || formData.jobNumber || '';
  const projectAddress = data.projectAddress || formData.projectLocation || formData.location || '';
  const principalContractor = data.principalContractor || formData.principalContractor || data.companyName || '';
  const activities = data.swmsData?.activities || data.activities || formData.activities || formData.workActivities || [];
  const plantEquipment = data.swmsData?.plantEquipment || data.plantEquipment || formData.plantEquipment || [];
  const emergencyProcedures = data.swmsData?.emergencyProcedures || data.emergencyProcedures || formData.emergencyProcedures || [];

  console.log('📋 Processing SWMS data:', {
    projectName,
    activitiesCount: activities.length,
    equipmentCount: plantEquipment.length,
    emergencyCount: emergencyProcedures.length
  });
  
  // Debug first activity structure
  if (activities.length > 0) {
    console.log('🔍 First activity structure:', JSON.stringify(activities[0], null, 2));
  }

  // HEADER SECTION
  doc.fontSize(20).font('Helvetica-Bold').text('SAFE WORK METHOD STATEMENT', { align: 'center' });
  doc.moveDown(0.5);
  
  // Riskify watermark
  doc.fontSize(12).font('Helvetica').fillColor('#0066CC')
     .text('Generated by RISKIFY - Professional SWMS Builder', { align: 'center' });
  doc.fillColor('#000000').moveDown(1);

  // PROJECT DETAILS SECTION
  doc.fontSize(14).font('Helvetica-Bold').text('PROJECT DETAILS', { underline: true });
  doc.moveDown(0.5);

  const projectDetails = [
    ['Project Name:', projectName],
    ['Project Number:', projectNumber],
    ['Project Address:', projectAddress],
    ['Principal Contractor:', principalContractor],
    ['Document Date:', new Date().toLocaleDateString('en-AU')]
  ];

  projectDetails.forEach(([label, value]) => {
    if (value) {
      doc.fontSize(10).font('Helvetica-Bold').text(label, { continued: true });
      doc.font('Helvetica').text(` ${value}`);
    }
  });

  doc.moveDown(1);

  // WORK ACTIVITIES SECTION
  if (activities && activities.length > 0) {
    doc.fontSize(14).font('Helvetica-Bold').text('WORK ACTIVITIES & RISK ASSESSMENT', { underline: true });
    doc.moveDown(0.5);

    activities.forEach((activity: any, index: number) => {
      // Check if we need a new page
      if (doc.y > 700) {
        doc.addPage();
      }

      doc.fontSize(12).font('Helvetica-Bold')
         .text(`${index + 1}. ${activity.name || activity.description || 'Work Activity'}`, { underline: true });
      doc.moveDown(0.3);

      // Activity description
      if (activity.description) {
        doc.fontSize(10).font('Helvetica').text(`Description: ${activity.description}`);
        doc.moveDown(0.2);
      }

      // Hazards
      if (activity.hazards && activity.hazards.length > 0) {
        doc.font('Helvetica-Bold').text('Hazards:');
        activity.hazards.forEach((hazard: any) => {
          doc.font('Helvetica').text(`• ${hazard.description || hazard}`, { indent: 10 });
        });
        doc.moveDown(0.2);
      }

      // Control Measures - handle both array and nested structure
      const controlMeasures = activity.controlMeasures || [];
      if (activity.hazards && activity.hazards.length > 0) {
        activity.hazards.forEach((hazard: any) => {
          if (hazard.controlMeasures && hazard.controlMeasures.length > 0) {
            controlMeasures.push(...hazard.controlMeasures);
          }
        });
      }
      
      if (controlMeasures.length > 0) {
        doc.font('Helvetica-Bold').text('Control Measures:');
        controlMeasures.forEach((control: any) => {
          const controlText = typeof control === 'string' ? control : control.description || control.measure || '';
          if (controlText) {
            doc.font('Helvetica').text(`• ${controlText}`, { indent: 10 });
          }
        });
        doc.moveDown(0.2);
      }

      // Risk Ratings
      if (activity.riskScore || activity.residualRisk) {
        doc.font('Helvetica-Bold').text('Risk Assessment:');
        if (activity.riskScore) doc.font('Helvetica').text(`Initial Risk: ${activity.riskScore}`, { indent: 10 });
        if (activity.residualRisk) doc.font('Helvetica').text(`Residual Risk: ${activity.residualRisk}`, { indent: 10 });
        doc.moveDown(0.2);
      }

      // PPE Requirements
      if (activity.ppe && activity.ppe.length > 0) {
        doc.font('Helvetica-Bold').text('PPE Required:');
        doc.font('Helvetica').text(activity.ppe.join(', '), { indent: 10 });
        doc.moveDown(0.2);
      }

      // Legislation
      if (activity.legislation) {
        doc.font('Helvetica-Bold').text('Relevant Legislation:');
        doc.font('Helvetica').text(activity.legislation, { indent: 10 });
      }

      doc.moveDown(0.8);
    });
  }

  // PLANT & EQUIPMENT SECTION
  if (plantEquipment && plantEquipment.length > 0) {
    // Check if we need a new page
    if (doc.y > 600) {
      doc.addPage();
    }

    doc.fontSize(14).font('Helvetica-Bold').text('PLANT & EQUIPMENT REGISTER', { underline: true });
    doc.moveDown(0.5);

    plantEquipment.forEach((equipment: any, index: number) => {
      doc.fontSize(11).font('Helvetica-Bold').text(`${index + 1}. ${equipment.name || equipment.equipment || 'Equipment Item'}`);
      
      if (equipment.type) doc.fontSize(10).font('Helvetica').text(`Type: ${equipment.type}`);
      if (equipment.riskLevel) doc.text(`Risk Level: ${equipment.riskLevel}`);
      if (equipment.certificationRequired !== undefined) {
        doc.text(`Certification Required: ${equipment.certificationRequired ? 'Yes' : 'No'}`);
      }
      if (equipment.inspectionStatus) doc.text(`Inspection Status: ${equipment.inspectionStatus}`);
      
      doc.moveDown(0.5);
    });
  }

  // EMERGENCY PROCEDURES SECTION
  if (emergencyProcedures && emergencyProcedures.length > 0) {
    // Check if we need a new page
    if (doc.y > 600) {
      doc.addPage();
    }

    doc.fontSize(14).font('Helvetica-Bold').text('EMERGENCY PROCEDURES', { underline: true });
    doc.moveDown(0.5);

    (Array.isArray(emergencyProcedures) ? emergencyProcedures : []).forEach((procedure: any, index: number) => {
      doc.fontSize(11).font('Helvetica-Bold').text(`${index + 1}. ${procedure.scenario || 'Emergency Scenario'}`);
      
      if (procedure.response) {
        doc.fontSize(10).font('Helvetica').text(`Response: ${procedure.response}`);
      }
      
      if (procedure.contacts && procedure.contacts.length > 0) {
        doc.font('Helvetica-Bold').text('Emergency Contacts:');
        procedure.contacts.forEach((contact: string) => {
          doc.font('Helvetica').text(`• ${contact}`, { indent: 10 });
        });
      }
      
      doc.moveDown(0.8);
    });
  }

  // FOOTER SECTION
  doc.addPage();
  doc.fontSize(14).font('Helvetica-Bold').text('AUTHORISATION & SIGNATURES', { underline: true });
  doc.moveDown(1);

  // Signature boxes
  const signatureY = doc.y;
  doc.fontSize(10).font('Helvetica-Bold');

  // SWMS Creator signature
  doc.text('SWMS CREATOR:', 50, signatureY);
  doc.rect(50, signatureY + 30, 200, 40).stroke();
  doc.text('Name: ___________________', 60, signatureY + 80);
  doc.text('Date: ____________________', 60, signatureY + 100);

  // Supervisor signature
  doc.text('SUPERVISOR APPROVAL:', 300, signatureY);
  doc.rect(300, signatureY + 30, 200, 40).stroke();
  doc.text('Name: ___________________', 310, signatureY + 80);
  doc.text('Date: ____________________', 310, signatureY + 100);

  // Disclaimer
  doc.moveDown(3);
  doc.fontSize(8).font('Helvetica')
     .text('This SWMS has been prepared in accordance with Australian WHS Regulations. All personnel must read and understand this document before commencing work.', 
           { align: 'center' });

  doc.end();
  });
}