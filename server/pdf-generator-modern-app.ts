import PDFDocument from 'pdfkit';

interface ModernAppPDFOptions {
  swmsData: any;
  projectName: string;
  projectAddress: string;
  uniqueId: string;
}

export function generateModernAppPDF(options: ModernAppPDFOptions) {
  const { swmsData, projectName, projectAddress, uniqueId } = options;
  
  const doc = new PDFDocument({
    size: 'A4',
    layout: 'landscape',
    margins: { top: 20, bottom: 20, left: 20, right: 20 }
  });

  // App's exact color scheme
  const colors = {
    primary: '#3b82f6',      // Blue-500
    secondary: '#0ea5e9',    // Sky-500  
    success: '#10b981',      // Emerald-500
    warning: '#f59e0b',      // Amber-500
    danger: '#ef4444',       // Red-500
    slate: '#64748b',        // Slate-500
    gray: '#6b7280',         // Gray-500
    background: '#f8fafc',   // Slate-50
    border: '#e2e8f0',       // Slate-200
    text: '#1e293b',         // Slate-800
    textMuted: '#64748b',    // Slate-500
    white: '#ffffff'
  };

  // Header with dark navy background matching your screenshot
  doc.fillColor('#334155');
  doc.rect(0, 0, 842, 60);
  doc.fill();

  // Header text
  doc.fillColor(colors.white);
  doc.font('Helvetica-Bold');
  doc.fontSize(24);
  doc.text('SAFE WORK METHOD STATEMENT', 30, 15);
  
  doc.fontSize(12);
  doc.font('Helvetica');
  doc.text('Generated by Riskify Professional SWMS Builder', 30, 42);

  // Company logos placeholder (top right)
  doc.fillColor(colors.white);
  doc.font('Helvetica');
  doc.fontSize(8);
  doc.text('RISKIFY', 650, 15);
  doc.text('CLIENT LOGO', 720, 15);
  
  // Logo boxes
  doc.strokeColor(colors.white);
  doc.lineWidth(1);
  doc.rect(650, 25, 60, 25);
  doc.stroke();
  doc.rect(720, 25, 60, 25);
  doc.stroke();

  // Completed badge
  doc.fillColor(colors.success);
  doc.roundedRect(790, 20, 40, 25, 4);
  doc.fill();
  doc.fillColor(colors.white);
  doc.font('Helvetica-Bold');
  doc.fontSize(8);
  doc.text('COMPLETED', 795, 30);

  // Project Information Card - Blue header like app
  const cardY = 80;
  
  // Blue header background
  doc.fillColor(colors.primary);
  doc.roundedRect(30, cardY, 780, 25, 8);
  doc.fill();
  // Square off bottom
  doc.rect(30, cardY + 20, 780, 5);
  doc.fill();

  // Project Information header text
  doc.fillColor(colors.white);
  doc.font('Helvetica-Bold');
  doc.fontSize(12);
  doc.text('PROJECT INFORMATION', 45, cardY + 8);

  // Light gray content background
  doc.fillColor(colors.background);
  doc.rect(30, cardY + 25, 780, 85);
  doc.fill();
  
  // Card border
  doc.strokeColor(colors.border);
  doc.lineWidth(0.5);
  doc.roundedRect(30, cardY, 780, 110, 8);
  doc.stroke();

  // Project details in 3 columns to prevent overlap
  const projectFields = [
    ['Project Name:', swmsData.projectName || swmsData.title || projectName],
    ['Project Address:', swmsData.projectAddress || projectAddress],
    ['Principal Contractor:', swmsData.principalContractor || 'Not specified'],
    ['Head Contractor:', swmsData.headContractor || 'Not specified'],
    ['Site Manager:', swmsData.siteManager || 'Not specified'],
    ['Project Manager:', swmsData.projectManager || 'Not specified'],
    ['Document ID:', uniqueId],
    ['Date Generated:', new Date().toLocaleDateString('en-AU')],
    ['Trade Type:', swmsData.tradeType || 'Structural Steel'],
    ['Job Number:', swmsData.jobNumber || 'JOB-2025-WS01'],
    ['Status:', 'Active Document']
  ];

  let col1Y = cardY + 40, col2Y = cardY + 40, col3Y = cardY + 40;
  projectFields.forEach((field, index) => {
    const colIndex = index % 3;
    const x = colIndex === 0 ? 45 : colIndex === 1 ? 295 : 545;
    const y = colIndex === 0 ? col1Y : colIndex === 1 ? col2Y : col3Y;
    
    doc.font('Helvetica-Bold');
    doc.fillColor(colors.textMuted);
    doc.fontSize(8);
    doc.text(field[0], x, y, { width: 80 });
    doc.font('Helvetica');
    doc.fillColor(colors.text);
    doc.text(field[1], x, y + 8, { width: 240, height: 10, ellipsis: true });
    
    if (colIndex === 0) col1Y += 18;
    else if (colIndex === 1) col2Y += 18;
    else col3Y += 18;
  });

  // Work Activities & Risk Assessment section
  const tableY = 180;
  
  doc.fillColor(colors.text);
  doc.font('Helvetica-Bold');
  doc.fontSize(14);
  doc.text('WORK ACTIVITIES & RISK ASSESSMENT', 30, tableY);

  // Modern table with clean styling
  const headers = ['Activity/Item', 'Hazards/Risks', 'Initial Risk Score', 'Control Measures/Risk Treatment', 'Legislation/Codes', 'Residual Risk Score'];
  const colWidths = [160, 160, 90, 190, 120, 100];
  
  // Table header with gray background
  doc.fillColor('#f1f5f9');
  doc.rect(30, tableY + 25, 820, 20);
  doc.fill();

  // Header borders
  doc.strokeColor(colors.border);
  doc.lineWidth(0.5);
  doc.rect(30, tableY + 25, 820, 20);
  doc.stroke();

  let headerX = 30;
  headers.forEach((header, index) => {
    // Vertical lines
    if (index > 0) {
      doc.moveTo(headerX, tableY + 25);
      doc.lineTo(headerX, tableY + 45);
      doc.stroke();
    }
    
    doc.fillColor(colors.text);
    doc.font('Helvetica-Bold');
    doc.fontSize(8);
    doc.text(header, headerX + 5, tableY + 32, { width: colWidths[index] - 10 });
    headerX += colWidths[index];
  });

  // Table data rows
  const activities = [
    {
      activity: 'Primary Steel Beam Erection',
      hazards: 'Falls from height, Crushing from beam movement, Weather',
      initialRisk: 'H (16)',
      controls: 'Full body harness with 2 lanyards, Certified dogman directing lifts, Weather monitoring',
      legislation: 'WHS Regulation 2017 Part 4.3, AS 4100:2020',
      residualRisk: 'M (4)'
    },
    {
      activity: 'High Strength Bolting',
      hazards: 'Falls during installation, Tool injuries, Over-torque failures',
      initialRisk: 'M (8)',
      controls: 'Safety positioning systems, Calibrated torque equipment, Backup fall arrest',
      legislation: 'AS 4100:2020, WHS Regulation 2017',
      residualRisk: 'L (2)'
    },
    {
      activity: 'Structural Welding Operations',
      hazards: 'Welding fume inhalation, Burns from hot metal, Arc eye exposure',
      initialRisk: 'M (6)',
      controls: 'Local exhaust ventilation, Heat resistant PPE, Auto-darkening helmets',
      legislation: 'AS/NZS 1554.1:2014, WHS Regulation 2017',
      residualRisk: 'L (2)'
    },
    {
      activity: 'Mobile Crane Operations',
      hazards: 'Load drop, Crane overturn, Electrical contact',
      initialRisk: 'H (12)',
      controls: 'Licensed crane operator, Load calculation sheets, Electrical clearance procedures',
      legislation: 'AS 1418.1:2017, WHS Regulation 2017',
      residualRisk: 'L (3)'
    }
  ];

  let rowY = tableY + 45;
  activities.forEach((row, index) => {
    // Alternating row colors
    if (index % 2 === 1) {
      doc.fillColor('#f8fafc');
      doc.rect(30, rowY, 820, 25);
      doc.fill();
    }

    // Row border
    doc.strokeColor(colors.border);
    doc.lineWidth(0.5);
    doc.rect(30, rowY, 820, 25);
    doc.stroke();

    let cellX = 30;
    const rowData = [row.activity, row.hazards, row.initialRisk, row.controls, row.legislation, row.residualRisk];
    
    rowData.forEach((data, colIndex) => {
      // Vertical lines
      if (colIndex > 0) {
        doc.moveTo(cellX, rowY);
        doc.lineTo(cellX, rowY + 25);
        doc.stroke();
      }
      
      // Risk score styling
      if (colIndex === 2 || colIndex === 5) {
        const riskLevel = data.includes('H') ? 'HIGH' : data.includes('M') ? 'MEDIUM' : 'LOW';
        const badgeColor = riskLevel === 'HIGH' ? colors.danger : riskLevel === 'MEDIUM' ? colors.warning : colors.success;
        
        // Risk badge
        doc.fillColor(badgeColor);
        doc.roundedRect(cellX + 5, rowY + 5, colWidths[colIndex] - 10, 15, 3);
        doc.fill();
        
        doc.fillColor(colors.white);
        doc.font('Helvetica-Bold');
        doc.fontSize(7);
        doc.text(data, cellX + 8, rowY + 10, { width: colWidths[colIndex] - 16, align: 'center' });
      } else {
        doc.fillColor(colors.text);
        doc.font('Helvetica');
        doc.fontSize(7);
        doc.text(data, cellX + 5, rowY + 5, { 
          width: colWidths[colIndex] - 10, 
          height: 15,
          ellipsis: true 
        });
      }
      
      cellX += colWidths[colIndex];
    });
    
    rowY += 25;
  });

  // Add second page for Construction Control Risk Matrix
  doc.addPage();

  // Construction Control Risk Matrix Header
  doc.fillColor('#64748b');
  doc.roundedRect(30, 30, 780, 25, 8);
  doc.fill();
  doc.rect(30, 50, 780, 5);
  doc.fill();

  doc.fillColor(colors.white);
  doc.font('Helvetica-Bold');
  doc.fontSize(12);
  doc.text('CONSTRUCTION CONTROL RISK MATRIX', 45, 38);

  // Table A: Risk Scale Definitions (Left side)
  const tableAY = 70;
  
  // Table A Headers
  const tableAHeaders = ['Risk Level', 'Qualitative Scale', 'Quantitative Scale', 'Magnitude Scale', 'Probability Scale'];
  const tableAColWidths = [60, 140, 80, 80, 80];
  
  doc.fillColor('#64748b');
  doc.rect(30, tableAY, 440, 16);
  doc.fill();
  
  let tableAHeaderX = 30;
  tableAHeaders.forEach((header, index) => {
    doc.strokeColor('#e2e8f0');
    doc.lineWidth(0.5);
    if (index > 0) {
      doc.moveTo(tableAHeaderX, tableAY);
      doc.lineTo(tableAHeaderX, tableAY + 16);
      doc.stroke();
    }
    
    doc.fillColor(colors.white);
    doc.font('Helvetica-Bold');
    doc.fontSize(6);
    doc.text(header, tableAHeaderX + 2, tableAY + 5, { width: tableAColWidths[index] - 4 });
    tableAHeaderX += tableAColWidths[index];
  });

  // Table A Data with colored risk levels
  const tableAData = [
    ['Extreme', 'Fatality, significant disability, catastrophic property damage', '$50,000+', 'Likely', 'Good chance'],
    ['High', 'Major amputation, minor permanent disability, moderate property damage', '$15,000-$50,000', 'Possible', 'Even chance'],
    ['Medium', 'Minor injury resulting in Lost Time Injury or Medically Treated Injury', '$1,000-$15,000', 'Unlikely', 'Low chance'],
    ['Low', 'First Aid Treatment with no lost time', '$0-$1,000', 'Very Rarely', 'Practically no chance']
  ];

  let tableARowY = tableAY + 16;
  tableAData.forEach((row, index) => {
    let tableACellX = 30;
    
    row.forEach((data, colIndex) => {
      // Cell background
      if (index % 2 === 1) {
        doc.fillColor('#f8fafc');
        doc.rect(tableACellX, tableARowY, tableAColWidths[colIndex], 14);
        doc.fill();
      }
      
      // Cell border
      doc.strokeColor('#e2e8f0');
      doc.lineWidth(0.5);
      doc.rect(tableACellX, tableARowY, tableAColWidths[colIndex], 14);
      doc.stroke();
      
      // Risk level badge for first column
      if (colIndex === 0) {
        const riskLevel = data;
        const badgeColor = riskLevel === 'Extreme' ? '#ef4444' : 
                          riskLevel === 'High' ? '#f59e0b' : 
                          riskLevel === 'Medium' ? '#3b82f6' : '#10b981';
        
        doc.fillColor(badgeColor);
        doc.rect(tableACellX + 2, tableARowY + 2, tableAColWidths[colIndex] - 4, 10);
        doc.fill();
        
        doc.fillColor(colors.white);
        doc.font('Helvetica-Bold');
        doc.fontSize(6);
        doc.text(data, tableACellX + 3, tableARowY + 4, { width: tableAColWidths[colIndex] - 6, align: 'center' });
      } else {
        doc.fillColor(colors.text);
        doc.font('Helvetica');
        doc.fontSize(5);
        doc.text(data, tableACellX + 2, tableARowY + 3, { 
          width: tableAColWidths[colIndex] - 4, 
          height: 8,
          ellipsis: true 
        });
      }
      
      tableACellX += tableAColWidths[colIndex];
    });
    
    tableARowY += 14;
  });

  // Table B: Risk Scoring Matrix (Right side) 
  const tableBY = 70;
  const tableBX = 490;
  
  // Likelihood headers (top)
  const likelihoodHeaders = ['Likely', 'Possible', 'Unlikely', 'Very Rarely'];
  const likelihoodColors = ['#ef4444', '#f59e0b', '#eab308', '#10b981'];
  
  doc.fillColor('#64748b');
  doc.rect(tableBX, tableBY, 320, 16);
  doc.fill();
  
  doc.fillColor(colors.white);
  doc.font('Helvetica-Bold');
  doc.fontSize(8);
  doc.text('RISK SCORING MATRIX', tableBX + 10, tableBY + 5);
  
  // Likelihood column headers
  let likelihoodX = tableBX + 80;
  likelihoodHeaders.forEach((header, index) => {
    doc.fillColor(likelihoodColors[index]);
    doc.rect(likelihoodX, tableBY + 16, 60, 14);
    doc.fill();
    
    doc.fillColor(colors.white);
    doc.font('Helvetica-Bold');
    doc.fontSize(6);
    doc.text(header, likelihoodX + 2, tableBY + 21, { width: 56, align: 'center' });
    likelihoodX += 60;
  });

  // Risk matrix grid with color coding
  const consequenceLabels = ['Extreme', 'High', 'Medium', 'Low'];
  const consequenceColors = ['#ef4444', '#f59e0b', '#3b82f6', '#10b981'];
  const riskScores = [
    [16, 14, 11, 7],
    [15, 12, 8, 5], 
    [13, 9, 6, 3],
    [10, 7, 4, 2]
  ];
  const scoreColors = [
    ['#dc2626', '#dc2626', '#ea580c', '#eab308'],
    ['#dc2626', '#ea580c', '#eab308', '#16a34a'],
    ['#ea580c', '#eab308', '#16a34a', '#16a34a'],
    ['#eab308', '#16a34a', '#16a34a', '#16a34a']
  ];

  let consequenceY = tableBY + 30;
  consequenceLabels.forEach((label, rowIndex) => {
    // Consequence label
    doc.fillColor(consequenceColors[rowIndex]);
    doc.rect(tableBX, consequenceY, 80, 20);
    doc.fill();
    
    doc.fillColor(colors.white);
    doc.font('Helvetica-Bold');
    doc.fontSize(6);
    doc.text(label, tableBX + 2, consequenceY + 7, { width: 76, align: 'center' });
    
    // Risk scores
    let scoreX = tableBX + 80;
    riskScores[rowIndex].forEach((score, colIndex) => {
      doc.fillColor(scoreColors[rowIndex][colIndex]);
      doc.rect(scoreX, consequenceY, 60, 20);
      doc.fill();
      
      doc.fillColor(colors.white);
      doc.font('Helvetica-Bold');
      doc.fontSize(10);
      doc.text(score.toString(), scoreX + 2, consequenceY + 6, { width: 56, align: 'center' });
      scoreX += 60;
    });
    
    consequenceY += 20;
  });

  // Action Required Legend (below matrices)
  const legendY = tableBY + 140;
  
  doc.fillColor('#64748b');
  doc.rect(30, legendY, 780, 16);
  doc.fill();
  
  doc.fillColor(colors.white);
  doc.font('Helvetica-Bold');
  doc.fontSize(8);
  doc.text('RISK RANKING & ACTION REQUIRED', 45, legendY + 5);
  
  const legendData = [
    ['14-16', 'Severe (S)', 'Action Required (A)', '#dc2626'],
    ['11-13', 'High (H)', 'Action in next 24 hrs', '#ea580c'],
    ['7-10', 'Medium (M)', 'Action this week', '#eab308'],
    ['1-6', 'Low (L)', 'Action as required', '#16a34a']
  ];
  
  let legendRowY = legendY + 16;
  legendData.forEach((item, index) => {
    if (index % 2 === 1) {
      doc.fillColor('#f8fafc');
      doc.rect(30, legendRowY, 780, 14);
      doc.fill();
    }
    
    doc.strokeColor('#e2e8f0');
    doc.lineWidth(0.5);
    doc.rect(30, legendRowY, 780, 14);
    doc.stroke();
    
    // Score range
    doc.fillColor(item[3]);
    doc.rect(45, legendRowY + 2, 60, 10);
    doc.fill();
    doc.fillColor(colors.white);
    doc.font('Helvetica-Bold');
    doc.fontSize(7);
    doc.text(item[0], 47, legendRowY + 4, { width: 56, align: 'center' });
    
    // Ranking and action
    doc.fillColor(colors.text);
    doc.font('Helvetica-Bold');
    doc.fontSize(7);
    doc.text(item[1], 120, legendRowY + 4);
    doc.font('Helvetica');
    doc.text(item[2], 200, legendRowY + 4);
    
    legendRowY += 14;
  });

  // Plant & Equipment Register
  doc.fillColor(colors.text);
  doc.font('Helvetica-Bold');
  doc.fontSize(14);
  doc.text('PLANT & EQUIPMENT REGISTER', 30, 200);

  // Emergency Procedures
  doc.fillColor(colors.text);
  doc.font('Helvetica-Bold');
  doc.fontSize(14);
  doc.text('EMERGENCY PROCEDURES & CONTACTS', 30, 350);

  // Emergency info in clean layout
  const emergencyData = [
    ['Emergency Contact:', '000', 'Site Supervisor:', 'On-site supervisor'],
    ['Assembly Point:', 'Main site entrance', 'Nearest Hospital:', 'Western Hospital Footscray'],
    ['Evacuation Route:', 'Via main access road', 'Fire Equipment:', 'Site office locations']
  ];

  let emergY = 375;
  emergencyData.forEach(([label1, value1, label2, value2]) => {
    doc.fillColor(colors.textMuted);
    doc.font('Helvetica-Bold');
    doc.fontSize(9);
    doc.text(label1, 45, emergY, { width: 120 });
    doc.fillColor(colors.text);
    doc.font('Helvetica');
    doc.text(value1, 165, emergY, { width: 180 });
    
    doc.fillColor(colors.textMuted);
    doc.font('Helvetica-Bold');
    doc.text(label2, 425, emergY, { width: 120 });
    doc.fillColor(colors.text);
    doc.font('Helvetica');
    doc.text(value2, 545, emergY, { width: 180 });
    
    emergY += 15;
  });

  // Footer
  doc.fillColor(colors.primary);
  doc.rect(0, 520, 842, 50);
  doc.fill();

  doc.fillColor(colors.white);
  doc.font('Helvetica');
  doc.fontSize(8);
  doc.text('Generated by RISKIFY - Professional SWMS Builder', 30, 535);
  doc.text(`Document ID: ${uniqueId} | Generated: ${new Date().toLocaleString('en-AU')}`, 30, 550);
  doc.text('This document is project-specific and should not be reused without regeneration', 500, 542, { 
    width: 300, 
    align: 'right' 
  });

  return doc;
}