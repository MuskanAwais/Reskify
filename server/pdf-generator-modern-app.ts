import PDFDocument from 'pdfkit';

interface ModernAppPDFOptions {
  swmsData: any;
  projectName: string;
  projectAddress: string;
  uniqueId: string;
}

export function generateModernAppPDF(options: ModernAppPDFOptions) {
  const { swmsData, projectName, projectAddress, uniqueId } = options;
  
  const doc = new PDFDocument({
    size: 'A4',
    layout: 'landscape',
    margins: { top: 20, bottom: 20, left: 20, right: 20 }
  });

  // App's exact color scheme
  const colors = {
    primary: '#3b82f6',      // Blue-500
    secondary: '#0ea5e9',    // Sky-500  
    success: '#10b981',      // Emerald-500
    warning: '#f59e0b',      // Amber-500
    danger: '#ef4444',       // Red-500
    slate: '#64748b',        // Slate-500
    gray: '#6b7280',         // Gray-500
    background: '#f8fafc',   // Slate-50
    border: '#e2e8f0',       // Slate-200
    text: '#1e293b',         // Slate-800
    textMuted: '#64748b',    // Slate-500
    white: '#ffffff'
  };

  // Header with dark navy background matching your screenshot
  doc.fillColor('#334155');
  doc.rect(0, 0, 842, 60);
  doc.fill();

  // Header text
  doc.fillColor(colors.white);
  doc.font('Helvetica-Bold');
  doc.fontSize(24);
  doc.text('SAFE WORK METHOD STATEMENT', 30, 15);
  
  doc.fontSize(12);
  doc.font('Helvetica');
  doc.text('Generated by Riskify Professional SWMS Builder', 30, 42);

  // Completed badge
  doc.fillColor(colors.success);
  doc.roundedRect(720, 20, 100, 25, 4);
  doc.fill();
  doc.fillColor(colors.white);
  doc.font('Helvetica-Bold');
  doc.fontSize(10);
  doc.text('COMPLETED', 735, 30);

  // Project Information Card - exactly like your app
  const cardY = 80;
  
  // Light gray background for project info
  doc.fillColor(colors.background);
  doc.roundedRect(30, cardY, 780, 80, 8);
  doc.fill();

  // Project Information header
  doc.fillColor(colors.text);
  doc.font('Helvetica-Bold');
  doc.fontSize(14);
  doc.text('PROJECT INFORMATION', 45, cardY + 15);

  // Project details in clean rows
  doc.fillColor(colors.textMuted);
  doc.font('Helvetica-Bold');
  doc.fontSize(9);
  
  const projectData = [
    ['Project:', swmsData.projectName || swmsData.title || projectName, 'Location:', swmsData.projectAddress || projectAddress],
    ['Contractor:', swmsData.principalContractor || 'Infrastructure Build Solutions Pty Ltd', 'Trade:', swmsData.tradeType || 'Structural Steel'],
    ['Job No:', swmsData.jobNumber || 'STEEL-2025-WS01', 'Date:', new Date().toLocaleDateString('en-AU')]
  ];

  let detailY = cardY + 40;
  projectData.forEach(([label1, value1, label2, value2]) => {
    // Left column
    doc.fillColor(colors.textMuted);
    doc.font('Helvetica-Bold');
    doc.text(label1, 45, detailY, { width: 80 });
    doc.fillColor(colors.text);
    doc.font('Helvetica');
    doc.text(value1, 125, detailY, { width: 250 });
    
    // Right column  
    doc.fillColor(colors.textMuted);
    doc.font('Helvetica-Bold');
    doc.text(label2, 425, detailY, { width: 80 });
    doc.fillColor(colors.text);
    doc.font('Helvetica');
    doc.text(value2, 505, detailY, { width: 250 });
    
    detailY += 12;
  });

  // Work Activities & Risk Assessment section
  const tableY = 180;
  
  doc.fillColor(colors.text);
  doc.font('Helvetica-Bold');
  doc.fontSize(14);
  doc.text('WORK ACTIVITIES & RISK ASSESSMENT', 30, tableY);

  // Modern table with clean styling
  const headers = ['Activity/Item', 'Hazards/Risks', 'Initial Risk Score', 'Control Measures/Risk Treatment', 'Legislation/Codes', 'Residual Risk Score'];
  const colWidths = [160, 160, 90, 190, 120, 100];
  
  // Table header with gray background
  doc.fillColor('#f1f5f9');
  doc.rect(30, tableY + 25, 820, 20);
  doc.fill();

  // Header borders
  doc.strokeColor(colors.border);
  doc.lineWidth(0.5);
  doc.rect(30, tableY + 25, 820, 20);
  doc.stroke();

  let headerX = 30;
  headers.forEach((header, index) => {
    // Vertical lines
    if (index > 0) {
      doc.moveTo(headerX, tableY + 25);
      doc.lineTo(headerX, tableY + 45);
      doc.stroke();
    }
    
    doc.fillColor(colors.text);
    doc.font('Helvetica-Bold');
    doc.fontSize(8);
    doc.text(header, headerX + 5, tableY + 32, { width: colWidths[index] - 10 });
    headerX += colWidths[index];
  });

  // Table data rows
  const activities = [
    {
      activity: 'Primary Steel Beam Erection',
      hazards: 'Falls from height, Crushing from beam movement, Weather',
      initialRisk: 'H (16)',
      controls: 'Full body harness with 2 lanyards, Certified dogman directing lifts, Weather monitoring',
      legislation: 'WHS Regulation 2017 Part 4.3, AS 4100:2020',
      residualRisk: 'M (4)'
    },
    {
      activity: 'High Strength Bolting',
      hazards: 'Falls during installation, Tool injuries, Over-torque failures',
      initialRisk: 'M (8)',
      controls: 'Safety positioning systems, Calibrated torque equipment, Backup fall arrest',
      legislation: 'AS 4100:2020, WHS Regulation 2017',
      residualRisk: 'L (2)'
    },
    {
      activity: 'Structural Welding Operations',
      hazards: 'Welding fume inhalation, Burns from hot metal, Arc eye exposure',
      initialRisk: 'M (6)',
      controls: 'Local exhaust ventilation, Heat resistant PPE, Auto-darkening helmets',
      legislation: 'AS/NZS 1554.1:2014, WHS Regulation 2017',
      residualRisk: 'L (2)'
    },
    {
      activity: 'Mobile Crane Operations',
      hazards: 'Load drop, Crane overturn, Electrical contact',
      initialRisk: 'H (12)',
      controls: 'Licensed crane operator, Load calculation sheets, Electrical clearance procedures',
      legislation: 'AS 1418.1:2017, WHS Regulation 2017',
      residualRisk: 'L (3)'
    }
  ];

  let rowY = tableY + 45;
  activities.forEach((row, index) => {
    // Alternating row colors
    if (index % 2 === 1) {
      doc.fillColor('#f8fafc');
      doc.rect(30, rowY, 820, 25);
      doc.fill();
    }

    // Row border
    doc.strokeColor(colors.border);
    doc.lineWidth(0.5);
    doc.rect(30, rowY, 820, 25);
    doc.stroke();

    let cellX = 30;
    const rowData = [row.activity, row.hazards, row.initialRisk, row.controls, row.legislation, row.residualRisk];
    
    rowData.forEach((data, colIndex) => {
      // Vertical lines
      if (colIndex > 0) {
        doc.moveTo(cellX, rowY);
        doc.lineTo(cellX, rowY + 25);
        doc.stroke();
      }
      
      // Risk score styling
      if (colIndex === 2 || colIndex === 5) {
        const riskLevel = data.includes('H') ? 'HIGH' : data.includes('M') ? 'MEDIUM' : 'LOW';
        const badgeColor = riskLevel === 'HIGH' ? colors.danger : riskLevel === 'MEDIUM' ? colors.warning : colors.success;
        
        // Risk badge
        doc.fillColor(badgeColor);
        doc.roundedRect(cellX + 5, rowY + 5, colWidths[colIndex] - 10, 15, 3);
        doc.fill();
        
        doc.fillColor(colors.white);
        doc.font('Helvetica-Bold');
        doc.fontSize(7);
        doc.text(data, cellX + 8, rowY + 10, { width: colWidths[colIndex] - 16, align: 'center' });
      } else {
        doc.fillColor(colors.text);
        doc.font('Helvetica');
        doc.fontSize(7);
        doc.text(data, cellX + 5, rowY + 5, { 
          width: colWidths[colIndex] - 10, 
          height: 15,
          ellipsis: true 
        });
      }
      
      cellX += colWidths[colIndex];
    });
    
    rowY += 25;
  });

  // Add second page for additional content
  doc.addPage();

  // Construction Control Risk Matrix
  doc.fillColor(colors.text);
  doc.font('Helvetica-Bold');
  doc.fontSize(14);
  doc.text('CONSTRUCTION CONTROL RISK MATRIX', 30, 30);

  // Risk matrix table
  const matrixHeaders = ['Risk Level', 'Qualitative Scale', 'Quantitative Scale', 'Likelihood', 'Consequence', 'Risk Score', 'Action Required'];
  const matrixColWidths = [80, 200, 120, 80, 80, 80, 120];

  // Matrix header
  doc.fillColor('#f1f5f9');
  doc.rect(30, 55, 760, 18);
  doc.fill();

  doc.strokeColor(colors.border);
  doc.lineWidth(0.5);
  doc.rect(30, 55, 760, 18);
  doc.stroke();

  let matrixHeaderX = 30;
  matrixHeaders.forEach((header, index) => {
    if (index > 0) {
      doc.moveTo(matrixHeaderX, 55);
      doc.lineTo(matrixHeaderX, 73);
      doc.stroke();
    }
    
    doc.fillColor(colors.text);
    doc.font('Helvetica-Bold');
    doc.fontSize(7);
    doc.text(header, matrixHeaderX + 3, 60, { width: matrixColWidths[index] - 6 });
    matrixHeaderX += matrixColWidths[index];
  });

  // Matrix data
  const matrixData = [
    ['Extreme', 'Fatality, significant disability, catastrophic property damage', '$50,000+', 'Likely', 'Catastrophic', '16-20', 'Action Required (A)'],
    ['High', 'Major amputation, minor permanent disability, moderate property damage', '$15,000-$50,000', 'Possible', 'Major', '11-15', 'Action in next 24 hrs'],
    ['Medium', 'Minor injury resulting in Lost Time Injury or Medically Treated Injury', '$1,000-$15,000', 'Unlikely', 'Moderate', '6-10', 'Action this week'],
    ['Low', 'First Aid Treatment with no lost time', '$0-$1,000', 'Very Rarely', 'Minor', '1-5', 'Action as required']
  ];

  let matrixRowY = 73;
  matrixData.forEach((row, index) => {
    if (index % 2 === 1) {
      doc.fillColor('#f8fafc');
      doc.rect(30, matrixRowY, 760, 18);
      doc.fill();
    }

    doc.strokeColor(colors.border);
    doc.lineWidth(0.5);
    doc.rect(30, matrixRowY, 760, 18);
    doc.stroke();

    let matrixCellX = 30;
    row.forEach((data, colIndex) => {
      if (colIndex > 0) {
        doc.moveTo(matrixCellX, matrixRowY);
        doc.lineTo(matrixCellX, matrixRowY + 18);
        doc.stroke();
      }
      
      // Risk level badge for first column
      if (colIndex === 0) {
        const riskLevel = data;
        const badgeColor = riskLevel === 'Extreme' ? colors.danger : 
                          riskLevel === 'High' ? colors.warning : 
                          riskLevel === 'Medium' ? colors.secondary : colors.success;
        
        doc.fillColor(badgeColor);
        doc.roundedRect(matrixCellX + 3, matrixRowY + 3, matrixColWidths[colIndex] - 6, 12, 2);
        doc.fill();
        
        doc.fillColor(colors.white);
        doc.font('Helvetica-Bold');
        doc.fontSize(7);
        doc.text(data, matrixCellX + 5, matrixRowY + 7, { width: matrixColWidths[colIndex] - 10, align: 'center' });
      } else {
        doc.fillColor(colors.text);
        doc.font('Helvetica');
        doc.fontSize(6);
        doc.text(data, matrixCellX + 3, matrixRowY + 4, { 
          width: matrixColWidths[colIndex] - 6, 
          height: 10,
          ellipsis: true 
        });
      }
      
      matrixCellX += matrixColWidths[colIndex];
    });
    
    matrixRowY += 18;
  });

  // Plant & Equipment Register
  doc.fillColor(colors.text);
  doc.font('Helvetica-Bold');
  doc.fontSize(14);
  doc.text('PLANT & EQUIPMENT REGISTER', 30, 200);

  // Emergency Procedures
  doc.fillColor(colors.text);
  doc.font('Helvetica-Bold');
  doc.fontSize(14);
  doc.text('EMERGENCY PROCEDURES & CONTACTS', 30, 350);

  // Emergency info in clean layout
  const emergencyData = [
    ['Emergency Contact:', '000', 'Site Supervisor:', 'On-site supervisor'],
    ['Assembly Point:', 'Main site entrance', 'Nearest Hospital:', 'Western Hospital Footscray'],
    ['Evacuation Route:', 'Via main access road', 'Fire Equipment:', 'Site office locations']
  ];

  let emergY = 375;
  emergencyData.forEach(([label1, value1, label2, value2]) => {
    doc.fillColor(colors.textMuted);
    doc.font('Helvetica-Bold');
    doc.fontSize(9);
    doc.text(label1, 45, emergY, { width: 120 });
    doc.fillColor(colors.text);
    doc.font('Helvetica');
    doc.text(value1, 165, emergY, { width: 180 });
    
    doc.fillColor(colors.textMuted);
    doc.font('Helvetica-Bold');
    doc.text(label2, 425, emergY, { width: 120 });
    doc.fillColor(colors.text);
    doc.font('Helvetica');
    doc.text(value2, 545, emergY, { width: 180 });
    
    emergY += 15;
  });

  // Footer
  doc.fillColor(colors.primary);
  doc.rect(0, 520, 842, 50);
  doc.fill();

  doc.fillColor(colors.white);
  doc.font('Helvetica');
  doc.fontSize(8);
  doc.text('Generated by RISKIFY - Professional SWMS Builder', 30, 535);
  doc.text(`Document ID: ${uniqueId} | Generated: ${new Date().toLocaleString('en-AU')}`, 30, 550);
  doc.text('This document is project-specific and should not be reused without regeneration', 500, 542, { 
    width: 300, 
    align: 'right' 
  });

  return doc;
}